# Alexis Dionne
# Compiler Project 2 - Parser
# 3/6/19

class Parser:

  # the parser will determine if the program makes sense with the grammar
  
  def __init__(self, tokenList=[]):
    self.tokenList = tokenList  # the list of tokens generated by Lex
    self.currentToken = None    # the token we are currently trying to match
    self.nextToken = None       # one token look ahead
    
  def parseProgram():
    parseBlock()
    matchAndConsume("$")
    
  def parseBlock():
    matchAndConsume("{")
    parseStatementList()
    matchAndConsume("}")
    
  def parseStatementList():
    if self.currentToken in firstOfStatement:
      parseStatement()
      parseStatementList()
    else:
      # epsilon production - nothing happens
  
  def parseStatement():
    if self.currentToken in firstOfPrint:
      parsePrint()
    elif self.currentToken in firstOfAssigment:
      parseAssignment()
    elif self.currentToken in firstOfVarDecl:
      parseVarDecl()
    elif self.currentToken in firstOfWhile:
      parseWhile()
    elif self.currentToken in firstOfIf:
      parseIf()
    elif self.currentToken in firstOfBlock:
      parseBlock()
      
  def parsePrint():